CREATE DATABASE subathon;
USE subathon;

DROP TABLE IF EXISTS `timer_event`;
DROP TABLE IF EXISTS `follow_event`;
DROP TABLE IF EXISTS `raid_event`;
DROP TABLE IF EXISTS `subscription_event`;
DROP TABLE IF EXISTS `community_gift_event`;
DROP TABLE IF EXISTS `tip_event`;
DROP TABLE IF EXISTS `cheer_event`;
DROP TABLE IF EXISTS `command_event`;
DROP TABLE IF EXISTS `event`;

CREATE TABLE `event`
(
    `id`          BIGINT UNSIGNED AUTO_INCREMENT NOT NULL COMMENT 'Id of the event',
    `type`        ENUM ('FOLLOW', 'RAID', 'SUBSCRIPTION', 'GIFT', 'TIP', 'CHEER', 'COMMAND') NOT NULL COMMENT 'Type of the event',
    `timestamp`   TIMESTAMP NOT NULL COMMENT 'Timestamp of the event',
    `source`      VARCHAR(20) COMMENT 'Source of the event',
    `username`    VARCHAR(30) NOT NULL COMMENT 'Username of the person causing the event',
    `insert_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT 'Insertion timestamp, auto generated by database',
    PRIMARY KEY (`id`)
);

CREATE TABLE `follow_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_follower_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `raid_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    `amount`   BIGINT NOT NULL COMMENT 'Amount of raiders brought in by the raid',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_raid_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `subscription_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    `tier`     ENUM ('PRIME', 'TIER_1', 'TIER_2', 'TIER_3') NOT NULL COMMENT 'Subscription tier',
    `gifted`   BOOLEAN NOT NULL COMMENT 'If the subscription was gifted',
    `sender`   VARCHAR(30) COMMENT 'The sender in case of a gifted subscription',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_subscription_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `community_gift_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    `amount`   BIGINT NOT NULL COMMENT 'Amount of gifted subs',
    `tier`     ENUM ('TIER_1', 'TIER_2', 'TIER_3') NOT NULL COMMENT 'Tier of the gifted subs',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_community_gift_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `tip_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    `amount`   BIGINT NOT NULL COMMENT 'Amount of money tipped',
    `currency` VARCHAR(30) COMMENT 'Currency of the tip',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_tip_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `cheer_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    `amount`   BIGINT NOT NULL COMMENT 'Amount of bits cheered',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_cheer_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `command_event`
(
    `event_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Reference to the event',
    `command`  ENUM ('START','PAUSE','ADD','REMOVE') NOT NULL COMMENT 'Type of the executed command',
    `seconds`  BIGINT COMMENT 'Seconds that the command potentially changed',
    PRIMARY KEY (`event_id`),
    CONSTRAINT `fk_command_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);

CREATE TABLE `timer_event`
(
    `id`                  BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Id of the timer event',
    `event_id`            BIGINT UNSIGNED COMMENT 'Reference to the subathon event',
    `timestamp`           TIMESTAMP NOT NULL COMMENT 'Timestamp of the timer event',
    `type`                ENUM ('TIME_ADDITION', 'TIME_SUBTRACTION', 'STATE_CHANGE') NOT NULL COMMENT 'Type of the timer event',
    `old_end_time`        TIMESTAMP COMMENT 'End timestamp before timer event',
    `current_end_time`    TIMESTAMP COMMENT 'End timestamp after timer event',
    `old_timer_state`     ENUM ('UNINITIALIZED', 'INITIALIZED', 'PAUSED', 'TICKING', 'ENDED') NOT NULL COMMENT 'Timer state before the timer event',
    `current_timer_state` ENUM ('UNINITIALIZED', 'INITIALIZED', 'PAUSED', 'TICKING', 'ENDED') NOT NULL COMMENT 'Timer state after the timer event',
    `start_time`          TIMESTAMP COMMENT 'Start time of the timer',
    `insert_time`         TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT 'Insertion timestamp, generated by database',
    PRIMARY KEY (`id`),
    CONSTRAINT `fk_timer_event_event`
        FOREIGN KEY (`event_id`) REFERENCES `event` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)